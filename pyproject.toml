[project]
name = "RAGents"
version = "0.1.3"
description = "Production-ready agentic RAG framework featuring intelligent decision trees, Logic-LLM integration, multimodal processing, and enterprise observability"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "instructor>=1.6.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "pydantic>=2.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pillow>=10.0.0",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
    "python-multipart>=0.0.6",
    "tiktoken>=0.5.0",
    "pymupdf>=1.23.0",
    "python-docx>=0.8.11",
    "openpyxl>=3.1.0",
    "markdownify>=0.11.0",
    "beautifulsoup4>=4.12.0",
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    "langchain-core>=0.1.0",
    "langchain-text-splitters>=0.0.1",
    "langgraph>=0.2.0",
    "litserve>=0.2.0",
    "click>=8.0.0",
    "jinja2>=3.0.0",
    "psutil>=5.9.0",
    "prometheus-client>=0.16.0",
    "mkdocs>=1.6.1",
    "chainlit>=2.8.0",
    "nicegui>=2.24.2",
    "fastapi-users>=14.0.1",
    "passlib>=1.7.4",
    "python-jose>=3.5.0",
    "sqlalchemy>=2.0.43",
    "bcrypt>=4.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
]

# Documentation
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
    "pymdown-extensions>=10.0.0",
]

# Frontend UI (separate package - not yet published)
# frontend = ["ragents-frontend>=0.1.0"]

# Vector store backends
weaviate = ["weaviate-client>=4.0.0"]
pgvector = ["asyncpg>=0.28.0"]
elasticsearch = ["elasticsearch>=8.0.0"]
all-vector-stores = ["weaviate-client>=4.0.0", "asyncpg>=0.28.0", "elasticsearch>=8.0.0"]

# AI/ML extensions
vision = ["transformers>=4.35.0", "torch>=2.0.0"]
evaluation = ["ragas>=0.1.0"]

# Observability
observability = ["opentelemetry-api>=1.20.0", "opentelemetry-sdk>=1.20.0"]

# Deployment
deployment = [
    "litserve>=0.2.0",
    "bentoml>=1.2.0",
    "gunicorn>=21.0.0",
    "docker>=6.0.0",
    "kubernetes>=28.0.0",
    "kfp>=2.0.0",
    "prometheus-client>=0.16.0",
    "grafana-client>=3.5.0"
]

# Complete installation
all = [
    "weaviate-client>=4.0.0", "asyncpg>=0.28.0", "elasticsearch>=8.0.0",
    "transformers>=4.35.0", "torch>=2.0.0",
    "opentelemetry-api>=1.20.0", "opentelemetry-sdk>=1.20.0",
    "litserve>=0.2.0", "gunicorn>=21.0.0", "docker>=6.0.0",
    "kubernetes>=28.0.0", "kfp>=2.0.0", "prometheus-client>=0.16.0"
]

[project.scripts]
ragents = "ragents.cli:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py310']

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # function calls in argument defaults
    "TCH003", # typing.TYPE_CHECKING in already guarded blocks
]

[tool.ruff.lint.isort]
known-first-party = ["ragents"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__
"tests/**/*.py" = ["S101"]  # Allow assert in tests

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
